buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'boris.test.consul'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/libs-milestone" }
}


ext {
	springCloudVersion = 'Edgware.SR1'
	springCloudStreamVersion = 'Ditmars.SR3'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.cloud:spring-cloud-starter')
	compile('org.springframework.cloud:spring-cloud-starter-consul-config')
	compile('org.springframework.cloud:spring-cloud-starter-vault-config')
	compile('org.springframework.boot:spring-boot-starter-web')
	runtime('org.springframework.boot:spring-boot-devtools')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	compile('org.springframework.cloud:spring-cloud-stream')
	compile('org.springframework.cloud:spring-cloud-starter-stream-kafka')
	compile('org.springframework.cloud:spring-cloud-stream-binder-kstream')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-stream-dependencies:${springCloudStreamVersion}"
	}
}

eclipse {
    classpath {
        file.whenMerged { classpath ->
            def iterator = classpath.entries.iterator()
            while(iterator.hasNext()) {
            	def cpe = iterator.next()
            	if(cpe instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder) {
            		if(cpe.path.contains('test/java')) {
	            		cpe.setOutput('build/classes/java/test/')
	            	} else if(cpe.path.contains('main/resources')) {
	            		cpe.setOutput('build/resources/main/')
	            	} else {
	            		cpe.setOutput('build/classes/java/main/')
	            	}
            	}
            }
        }
    }
}
